/* --- VARIABLES & GLOBAL STYLES --- */
@property --angle {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}

:root {
    --bg-color: #010413;
    --text-color: #d1d1d8;
    --heading-color: #ffffff;
    --accent-1: #00f6ff;
    --accent-2: #ff00c1;
    --accent-3: #7f00ff;
    --card-bg: rgba(12, 16, 41, 0.5);
    --border-color: rgba(0, 246, 255, 0.2);
    --shadow-color: rgba(0, 246, 255, 0.15);
    --nav-height: 70px;
    --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    --font-size-base: clamp(1rem, 0.9vw + 0.5rem, 1.25rem);
    --font-size-lg: clamp(1.2rem, 1.5vw + 0.5rem, 2rem);
    --font-size-xl: clamp(2.8rem, 5vw + 1rem, 4.5rem);
}

[data-theme="light"] {
    --bg-color: #f0f2f5;
    --text-color: #333;
    --heading-color: #111;
    --accent-1: #007acc;
    --accent-2: #d63384;
    --accent-3: #6f42c1;
    --card-bg: rgba(255, 255, 255, 0.6);
    --border-color: rgba(0, 122, 204, 0.3);
    --shadow-color: rgba(0, 122, 204, 0.15);
}


*, *::before, *::after { box-sizing: border-box; }
html { scroll-behavior: smooth; }

body { 
    margin: 0; 
    font-family: var(--font-family); 
    background-color: var(--bg-color); 
    color: var(--text-color); 
    overflow-x: hidden; 
    line-height: 1.7;
    font-size: var(--font-size-base);
    transition: background-color 0.4s ease, color 0.4s ease;
}
body.menu-open { overflow: hidden; }

h1, h2, h3 { line-height: 1.2; font-weight: 700; color: var(--heading-color); }
h1 { font-size: var(--font-size-xl); }
h2 { font-size: clamp(2rem, 5vw, 3rem); text-align: center; margin-bottom: 4rem; position: relative; }
h2::after { content: ''; width: 60px; height: 3px; background: var(--accent-1); position: absolute; bottom: -1rem; left: 50%; transform: translateX(-50%); box-shadow: 0 0 10px var(--accent-1); }
h3 { font-size: var(--font-size-lg); color: var(--accent-1); margin-top: 0; }
a { color: var(--accent-1); text-decoration: none; transition: color 0.3s ease; }
a:hover { color: var(--heading-color); }

.container { width: min(1200px, 90vw); margin: 0 auto; }

/* --- INTERACTIVE & ANIMATED ELEMENTS --- */
#preloader { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: var(--bg-color); z-index: 9999; display: flex; justify-content: center; align-items: center; transition: opacity 0.5s ease; }
#preloader.loaded { opacity: 0; pointer-events: none; }
.loader { width: 50px; height: 50px; border: 3px solid var(--border-color); border-top-color: var(--accent-1); border-radius: 50%; animation: spin 1s linear infinite; }
@keyframes spin { to { transform: rotate(360deg); } }

#particle-canvas { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; }

/* Shine Effect */
.project-card, .about-stats { position: relative; overflow: hidden; }
.project-card::after, .about-stats::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -200%;
    width: 80px; /* Increased width */
    height: 200%;
    transform: rotate(25deg);
    background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.15), transparent);
    transition: left 1.6s cubic-bezier(0.25, 1, 0.5, 1); /* Slower speed */
}
.project-card:hover::after, .about-stats:hover::after {
    left: 200%;
}

/* --- LAYOUT & SECTIONS --- */
.site-wrapper { position: relative; z-index: 1; }
nav { position: fixed; top: 0; left: 0; width: 100%; z-index: 1000; height: var(--nav-height); transition: background-color 0.4s ease; }
nav.scrolled { background: rgba(1, 4, 19, 0.8); backdrop-filter: blur(10px); }
[data-theme="light"] nav.scrolled { background: rgba(240, 242, 245, 0.8); }
.nav-container { display: flex; justify-content: space-between; align-items: center; max-width: 1400px; margin: 0 auto; padding: 0 2rem; height: 100%; }
.nav-logo { font-size: 1.5rem; font-weight: bold; }
nav ul { display: flex; gap: 3rem; }
.nav-link { font-size: 1rem; padding: 0.5rem 0; position: relative; }
.nav-controls { display: flex; align-items: center; gap: 1.5rem; }
.theme-toggle { background: transparent; border: 1px solid var(--border-color); color: var(--text-color); width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.4s ease; font-size: 1.2rem; }
.theme-toggle:hover { background: var(--shadow-color); transform: rotate(30deg); }
.mobile-menu-btn { display: none; }

.main-content { padding-top: var(--nav-height); }
.section { min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 6rem 2rem; }

/* Hero Section */
.hero-content { display: flex; align-items: center; justify-content: center; gap: clamp(2rem, 8vw, 6rem); width: 100%; max-width: 1200px; }
.hero-left { flex-shrink: 0; }
.hero-right { text-align: left; }
.hero-right .tilt-panel { perspective: 1500px; }
.hero-text-wrapper { transition: transform 0.4s ease; transform-style: preserve-3d; }
.profile-img { width: clamp(150px, 20vw, 220px); height: clamp(150px, 20vw, 220px); border-radius: 50%; border: 4px solid var(--accent-1); object-fit: cover; box-shadow: 0 0 40px var(--shadow-color), inset 0 0 30px rgba(0, 246, 255, 0.2); transition: transform 0.3s ease, opacity 0.3s ease; }
.glitch { position: relative; text-shadow: 0 0 5px var(--accent-1), 0 0 10px var(--accent-2); animation: glitch-anim 5s infinite alternate; }
@keyframes glitch-anim { from { text-shadow: 0 0 5px var(--accent-1), 0 0 10px var(--accent-2); } to { text-shadow: 0 0 5px var(--accent-2), 0 0 10px var(--accent-1); } }
.typing-container { min-height: 4rem; /* Reserve space for typing text */ color: var(--accent-1); font-size: var(--font-size-lg); margin: 0.5rem 0 1rem; }
#typing-effect .typed-cursor { font-size: var(--font-size-lg); }
.hero-description { max-width: 500px; margin-bottom: 2.5rem; opacity: 0.9; }
.cta-button { border-radius: 50px; font-weight: bold; padding: 1rem 2.5rem; border: none; color: #fff; background: linear-gradient(45deg, var(--accent-2), var(--accent-1)); transition: all 0.3s ease; }
.cta-button:hover { transform: scale(1.05); box-shadow: 0 0 30px var(--shadow-color); }

/* About Section */
.about-panel { width: 100%; max-width: 1000px; perspective: 1500px; }
.about-content { display: grid; grid-template-columns: 2fr 1fr; gap: 3rem; text-align: left; align-items: center; transition: transform 0.4s ease; transform-style: preserve-3d; }
.about-text h3 { margin-bottom: 1.5rem; }
.about-stats { background: var(--card-bg); padding: 2rem; border: 1px solid var(--border-color); border-left: 4px solid var(--accent-1); backdrop-filter: blur(10px); }
.about-stats h3 { margin-bottom: 1.5rem; text-align: center; }
.about-stats ul { list-style: none; padding: 0; margin: 0; }
.about-stats li { margin-bottom: 1.2rem; }
.about-stats li:last-child { margin-bottom: 0; }
.stat-bar { width: 100%; height: 10px; background: rgba(0, 0, 0, 0.3); border-radius: 5px; margin-top: 0.5rem; }
.stat-bar div { height: 100%; background: linear-gradient(90deg, var(--accent-2), var(--accent-1)); border-radius: 5px; box-shadow: 0 0 10px var(--shadow-color); animation: fill-bar 1.5s cubic-bezier(0.25, 1, 0.5, 1); }
@keyframes fill-bar { from { width: 0 !important; } }

/* Projects Section */
.project-filters { display: flex; flex-wrap: wrap; justify-content: center; gap: 1rem; margin-bottom: 3rem; }
.filter-btn { background: transparent; border: 1px solid var(--border-color); color: var(--text-color); padding: 0.5rem 1.5rem; border-radius: 20px; cursor: pointer; transition: all 0.3s ease; }
.filter-btn:hover { background: var(--shadow-color); color: var(--heading-color); }
.filter-btn.active { background: var(--accent-1); color: var(--bg-color); border-color: var(--accent-1); box-shadow: 0 0 15px var(--shadow-color); }
.project-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 2rem; }
.project-card, .placeholder-card { opacity: 0; display: none; animation: scaleUp 0.5s ease forwards; }
.project-card.visible, .placeholder-card.visible { opacity: 1; display: grid; }
@keyframes scaleUp { from { transform: scale(0.8); opacity: 0; } to { transform: scale(1); opacity: 1; } }
.project-card { position: relative; background: var(--card-bg); border-radius: 10px; transition: transform 0.4s ease; perspective: 1000px; }
.project-card:hover { transform: translateY(-10px); }
.project-card::before { content: ""; position: absolute; inset: 0; border-radius: inherit; padding: 2px; background: conic-gradient(from var(--angle), var(--accent-3), var(--accent-2) 20%, var(--accent-1), var(--accent-2) 80%, var(--accent-3)); animation: spin-border 5s linear infinite; opacity: 0.3; transition: opacity 0.3s; -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0); mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0); -webkit-mask-composite: xor; mask-composite: exclude; }
.project-card:hover::before { opacity: 1; }
.card-content { position: relative; z-index: 1; padding: 2rem; display: flex; flex-direction: column; height: 100%; text-align: center; justify-content: center; transform-style: preserve-3d; transform: rotateX(var(--rotate-x, 0deg)) rotateY(var(--rotate-y, 0deg)); }
.card-content p { flex-grow: 1; margin: 1rem 0; opacity: 0.8; }
.card-content a { font-weight: bold; margin-top: 1.5rem; display: inline-block; }
.placeholder-card { border: 2px dashed var(--border-color); background: transparent; display: flex; align-items: center; justify-content: center; border-radius: 10px; }

/* Contact Section */
#contact .container { text-align: center; }
.contact-subtitle { margin-bottom: 3rem; }
.social-links { display: flex; justify-content: center; gap: 4rem; }
.social-links a { font-size: 2.5rem; transition: transform 0.3s ease; }
.social-links a:hover { transform: scale(1.2) translateY(-5px); color: var(--heading-color); }
#copy-notification { position: fixed; bottom: 2rem; left: 50%; transform: translateX(-50%); background: var(--accent-1); color: var(--bg-color); padding: 0.8rem 1.5rem; border-radius: 5px; opacity: 0; visibility: hidden; transition: all 0.4s; }
#copy-notification.show { opacity: 1; visibility: visible; }

/* --- RESPONSIVE & UTILITIES --- */
#scroll-to-top { position: fixed; bottom: 2rem; right: 2rem; width: 45px; height: 45px; background: var(--accent-1); color: var(--bg-color); border-radius: 50%; display: flex; justify-content: center; align-items: center; font-size: 1.2rem; opacity: 0; visibility: hidden; transform: translateY(20px); transition: all 0.3s; z-index: 999; }
#scroll-to-top.visible { opacity: 1; visibility: visible; transform: translateY(0); }

@media (max-width: 992px) { .hero-content { flex-direction: column; text-align: center; } .hero-right { text-align: center; } .about-content { grid-template-columns: 1fr; } }
@media (max-width: 768px) {
    .mobile-menu-btn { display: flex; flex-direction: column; justify-content: space-around; width: 28px; height: 24px; background: transparent; border: none; z-index: 1001; cursor: pointer; }
    .mobile-menu-btn span { display: block; height: 2px; width: 100%; background-color: var(--heading-color); border-radius: 3px; transition: all 0.3s ease; }
    .mobile-menu-btn.open span:nth-child(1) { transform: translateY(10px) rotate(45deg); }
    .mobile-menu-btn.open span:nth-child(2) { opacity: 0; }
    .mobile-menu-btn.open span:nth-child(3) { transform: translateY(-10px) rotate(-45deg); }
    nav ul { position: fixed; top: 0; right: 0; width: min(70vw, 300px); height: 100vh; background: var(--bg-color); flex-direction: column; justify-content: center; align-items: center; transform: translateX(100%); transition: transform 0.4s ease; box-shadow: -10px 0 30px rgba(0,0,0,0.1); }
    nav ul.active { transform: translateX(0); }
}```

### **JavaScript (`script.js`) 完整代码**

```javascript
document.addEventListener('DOMContentLoaded', () => {

    // --- PRELOADER ---
    window.addEventListener('load', () => {
        document.getElementById('preloader').classList.add('loaded');
    });

    // --- INITIALIZE LIBRARIES ---
    AOS.init({ duration: 1000, once: true, offset: 50 });

    new Typed('#typing-effect', {
        strings: ['一位充满热情的编程爱好者', '探索技术的无限可能', '专注于AI协作编程'],
        typeSpeed: 70,
        backSpeed: 40,
        loop: true
    });


    // --- INTERACTIVE EFFECTS ---
    // 1. Text Decode Hover for Nav Links
    const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    document.querySelectorAll('a[data-value]').forEach(link => {
        let interval = null;
        link.onmouseover = event => {
            let iteration = 0;
            clearInterval(interval);
            interval = setInterval(() => {
                const target = event.currentTarget;
                target.innerText = target.dataset.value.split("")
                    .map((letter, index) => {
                        if (index < iteration) return target.dataset.value[index];
                        return letters[Math.floor(Math.random() * 52)];
                    })
                    .join("");
                if (iteration >= target.dataset.value.length) clearInterval(interval);
                iteration += 1 / 2;
            }, 30);
        };
    });

    // 2. 3D Tilt Effect
    const initTiltEffect = () => {
        if (window.innerWidth > 768 && !('ontouchstart' in window)) {
            const tiltElements = document.querySelectorAll('.tilt-panel');
            tiltElements.forEach(el => {
                const content = el.querySelector('.card-content, .about-content, .hero-text-wrapper');
                el.addEventListener('mousemove', e => {
                    const rect = el.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    const centerX = rect.width / 2;
                    const centerY = rect.height / 2;
                    const rotateX = ((y - centerY) / centerY) * -8;
                    const rotateY = ((x - centerX) / centerX) * 8;
                    
                    requestAnimationFrame(() => {
                        if(content) content.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
                    });
                });
                el.addEventListener('mouseleave', () => {
                    requestAnimationFrame(() => {
                        if(content) content.style.transform = 'rotateX(0deg) rotateY(0deg)';
                    });
                });
            });
        }
    };
    initTiltEffect();

    // 3. Scroll-Driven Avatar Animation
    const avatar = document.getElementById('hero-avatar');
    window.addEventListener('scroll', () => {
        const scrollY = window.scrollY;
        if (avatar && scrollY < window.innerHeight) {
            const scale = Math.max(0.5, 1 - scrollY / 800);
            const rotation = scrollY / 10;
            const opacity = Math.max(0, 1 - scrollY / 500);
            avatar.style.transform = `scale(${scale}) rotate(${rotation}deg)`;
            avatar.style.opacity = opacity;
        }
    });

    // 4. Project Filtering System
    const filterBtns = document.querySelectorAll('.filter-btn');
    const projectItems = document.querySelectorAll('.project-card, .placeholder-card');
    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            const filter = btn.dataset.filter;
            projectItems.forEach(item => {
                if (filter === 'all' || item.dataset.category === filter) {
                    item.classList.add('visible');
                } else {
                    item.classList.remove('visible');
                }
            });
        });
    });
    document.querySelector('.filter-btn[data-filter="all"]').click();

    // 5. Theme Toggle
    const themeToggle = document.getElementById('theme-toggle');
    const applyTheme = (theme) => {
        document.body.dataset.theme = theme;
        themeToggle.querySelector('i').className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
        localStorage.setItem('theme', theme);
    };
    themeToggle.addEventListener('click', () => {
        const newTheme = document.body.dataset.theme === 'dark' ? 'light' : 'dark';
        applyTheme(newTheme);
    });
    const savedTheme = localStorage.getItem('theme') || 'dark';
    applyTheme(savedTheme);


    // --- NAVIGATION & SCROLLING ---
    const nav = document.querySelector('nav');
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const navUl = document.querySelector('nav ul');
    const scrollToTopBtn = document.getElementById('scroll-to-top');

    window.addEventListener('scroll', () => {
        nav.classList.toggle('scrolled', window.scrollY > 50);
        scrollToTopBtn.classList.toggle('visible', window.scrollY > 300);
    });

    mobileMenuBtn.addEventListener('click', () => {
        mobileMenuBtn.classList.toggle('open');
        navUl.classList.toggle('active');
        document.body.classList.toggle('menu-open');
    });
    
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', () => {
            if (navUl.classList.contains('active')) {
                mobileMenuBtn.classList.remove('open');
                navUl.classList.remove('active');
                document.body.classList.remove('menu-open');
            }
        });
    });

    // --- COPY TO CLIPBOARD ---
    const copyNotification = document.getElementById('copy-notification');
    document.querySelectorAll('[data-copy]').forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            navigator.clipboard.writeText(item.dataset.copy).then(() => {
                copyNotification.classList.add('show');
                setTimeout(() => { copyNotification.classList.remove('show'); }, 2000);
            });
        });
    });
});

// --- P5.JS PARTICLE BACKGROUND with Lines, Repulsion, Attraction, Shooting Stars & Theming ---
let particles = [];
let shootingStars = [];
const particleConfig = window.innerWidth > 768 ? 
    { count: 100, repelRadius: 100, speed: 1.2, lineDist: 120 } : 
    { count: 40, repelRadius: 60, speed: 0.8, lineDist: 100 };

function setup() {
    let canvas = createCanvas(window.innerWidth, window.innerHeight);
    canvas.parent('particle-canvas');
    for (let i = 0; i < particleConfig.count; i++) {
        particles.push(new Particle());
    }
    // Create shooting stars at random intervals
    setInterval(() => {
        if (shootingStars.length < 3) {
            shootingStars.push(new ShootingStar());
        }
    }, Math.random() * 5000 + 3000);
}

function draw() {
    clear();
    const isLightTheme = document.body.dataset.theme === 'light';
    const mouseVec = createVector(mouseX, mouseY);

    for (let i = 0; i < particles.length; i++) {
        particles[i].update(mouseVec);
        particles[i].display(isLightTheme);
        for (let j = i + 1; j < particles.length; j++) {
            const d = dist(particles[i].pos.x, particles[i].pos.y, particles[j].pos.x, particles[j].pos.y);
            if (d < particleConfig.lineDist) {
                const alpha = map(d, 0, particleConfig.lineDist, 60, 0);
                const accent1 = isLightTheme ? color(0, 122, 204) : color(0, 246, 255);
                accent1.setAlpha(alpha);
                stroke(accent1);
                strokeWeight(1);
                line(particles[i].pos.x, particles[i].pos.y, particles[j].pos.x, particles[j].pos.y);
            }
        }
    }

    for (let i = shootingStars.length - 1; i >= 0; i--) {
        shootingStars[i].update();
        shootingStars[i].display(isLightTheme);
        if (shootingStars[i].isOffscreen()) {
            shootingStars.splice(i, 1);
        }
    }
}

function windowResized() {
    resizeCanvas(window.innerWidth, window.innerHeight);
}

class Particle {
    constructor() { this.pos = createVector(random(width), random(height)); this.vel = p5.Vector.random2D().mult(random(0.2, particleConfig.speed)); this.acc = createVector(0, 0); this.size = random(1, 3); this.maxSpeed = particleConfig.speed; }
    applyForce(force) { this.acc.add(force); }
    update(mouseVec) { if (mouseIsPressed) this.attract(mouseVec); else this.repel(mouseVec); this.vel.add(this.acc); this.vel.limit(this.maxSpeed); this.pos.add(this.vel); this.acc.mult(0); this.edges(); }
    display(isLight) { const accent1 = isLight ? color(0, 122, 204) : color(0, 246, 255); noStroke(); fill(accent1); ellipse(this.pos.x, this.pos.y, this.size); }
    repel(target) { const force = p5.Vector.sub(this.pos, target); const d = force.mag(); if (d < particleConfig.repelRadius) { force.setMag(map(d, 0, particleConfig.repelRadius, 1, 0) * 5); this.applyForce(force); } }
    attract(target) { const force = p5.Vector.sub(target, this.pos); let d = force.mag(); d = constrain(d, 5, 50); force.setMag(0.8 / (d * d)); this.applyForce(force); }
    edges() { if (this.pos.x < -10) this.pos.x = width + 10; if (this.pos.x > width + 10) this.pos.x = -10; if (this.pos.y < -10) this.pos.y = height + 10; if (this.pos.y > height + 10) this.pos.y = -10; }
}

class ShootingStar {
    constructor() {
        this.reset();
        this.len = random(40, 60); // Denser tail
        this.history = [];
    }
    reset() {
        this.x = random(width * 1.5);
        this.y = random(-height * 0.5, 0);
        this.speed = random(15, 25);
    }
    isOffscreen() {
        return this.x < -200 || this.y > height + 200;
    }
    update() {
        this.x -= this.speed;
        this.y += this.speed / 2;
        this.history.push(createVector(this.x, this.y));
        if (this.history.length > this.len) {
            this.history.splice(0, 1);
        }
    }
    display(isLight) {
        // Draw the glow for the head
        if (this.history.length > 0) {
            const head = this.history[this.history.length - 1];
            const glowColor = isLight ? color(0, 122, 204) : color(0, 246, 255);
            glowColor.setAlpha(200); // Brighter glow
            noStroke();
            fill(glowColor);
            ellipse(head.x, head.y, this.len * 0.75, this.len * 0.75); // Half size glow
        }

        // Draw the trail
        for (let i = 0; i < this.history.length; i++) {
            let pos = this.history[i];
            let alpha = map(i, 0, this.history.length, 0, 255); // Full brightness trail
            const starColor = isLight ? color(80, 80, 80) : color(255, 255, 255);
            starColor.setAlpha(alpha);
            noStroke();
            fill(starColor);
            ellipse(pos.x, pos.y, i * 0.75, i * 0.75); // Half size trail
        }
    }
}
